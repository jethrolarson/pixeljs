// Generated by CoffeeScript 1.3.3
(function() {
  var createArray, createMatrix;

  createArray = function(len, initialValues) {
    var ar, el, _i, _len;
    if (initialValues == null) {
      initialValues = "0";
    }
    ar = new Array(len);
    for (_i = 0, _len = ar.length; _i < _len; _i++) {
      el = ar[_i];
      el = initialValues;
    }
    return ar;
  };

  createMatrix = function(x, y, initialValues, defaultValue) {
    var ar, ar2, i, j, _i, _j;
    if (defaultValue == null) {
      defaultValue = "0";
    }
    ar = [];
    for (i = _i = 0; 0 <= x ? _i < x : _i > x; i = 0 <= x ? ++_i : --_i) {
      ar2 = [];
      for (j = _j = 0; 0 <= y ? _j < y : _j > y; j = 0 <= y ? ++_j : --_j) {
        ar2.push(initialValues ? initialValues.shift() : defaultValue);
      }
      ar.push(ar2);
    }
    return ar;
  };

  window.Level = function(level) {
    return ($.extend({
      init: function() {
        var i, l, _fgcolors, _i, _layers, _len;
        _layers = this.game.split(',');
        this.layers = [];
        _fgcolors = this.fgcolor.split(',');
        for (i = _i = 0, _len = _layers.length; _i < _len; i = ++_i) {
          l = _layers[i];
          this.layers.push({
            grid: createMatrix(this.x, this.y, l.split('')),
            mark: createMatrix(this.x, this.y),
            paint: createMatrix(this.x, this.y),
            fgcolor: _fgcolors.length > i ? _fgcolors[i] : _fgcolors[0]
          });
        }
        this.currentLayerIndex = this.layers.length - 1;
        this.currentLayer = this.layers[this.currentLayerIndex];
        this.layerVisibility = [];
        return this;
      },
      getRow: function(y) {
        return this.currentLayer.grid[y];
      },
      getCol: function(x) {
        var ar, i, _i, _ref;
        ar = [];
        for (i = _i = 0, _ref = this.y; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          ar.push(this.currentLayer.grid[i][x]);
        }
        return ar;
      },
      getRowHints: function() {
        var hints, row, _i, _ref;
        hints = [];
        for (row = _i = 0, _ref = this.y; 0 <= _ref ? _i < _ref : _i > _ref; row = 0 <= _ref ? ++_i : --_i) {
          hints.push(this.getLineHints(this.getRow(row)));
        }
        return hints;
      },
      getColHints: function() {
        var hints, i, _i, _ref;
        hints = [];
        for (i = _i = 0, _ref = this.x; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          hints.push(this.getLineHints(this.getCol(i)));
        }
        return hints;
      },
      getLineHints: function(row) {
        var cell, hint, hints, i, pushHint, _i, _len;
        hints = [];
        hint = 0;
        pushHint = function(force) {
          if (force == null) {
            force = false;
          }
          if (hint > 0 || force) {
            hints.push(hint);
          }
          return hint = 0;
        };
        for (i = _i = 0, _len = row.length; _i < _len; i = ++_i) {
          cell = row[i];
          if (+cell) {
            hint += 1;
            if (i === row.length - 1) {
              pushHint();
            }
          } else {
            pushHint();
          }
        }
        if (hints.length === 0) {
          pushHint(true);
        }
        return hints;
      },
      getAt: function(x, y, type) {
        if (type == null) {
          type = "grid";
        }
        return +this.currentLayer[type][y][x];
      },
      setAt: function(x, y, val, type) {
        if (type == null) {
          type = "grid";
        }
        return this.currentLayer[type][y][x] = val;
      },
      setLayer: function(layerIndex) {
        this.currentLayerIndex = layerIndex;
        return this.currentLayer = this.layers[this.currentLayerIndex];
      },
      addCols: function(num) {
        var i, j, layer, n, _i, _j, _len, _len1, _ref, _ref1;
        i = 0;
        while (i < num) {
          _ref = this.layers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            layer = _ref[_i];
            _ref1 = layer.grid;
            for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
              n = _ref1[j];
              layer.grid[j].push('0');
              layer.mark[j].push('0');
              layer.paint[j].push('0');
            }
          }
          i += 1;
        }
        return this.x += num;
      },
      addRows: function(num) {
        var i, layer, _i, _len, _ref;
        i = 0;
        while (i < num) {
          _ref = this.layers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            layer = _ref[_i];
            layer.grid.push(createArray(this.y));
            layer.mark.push(createArray(this.y));
            layer.paint.push(createArray(this.y));
          }
          i += 1;
        }
        return this.y += num;
      },
      subtractCols: function(num) {
        var i, j, layer, n, _i, _j, _len, _len1, _ref, _ref1, _results;
        this.x -= num;
        i = 0;
        _results = [];
        while (i < num) {
          _ref = this.layers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            layer = _ref[_i];
            _ref1 = layer.grid;
            for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
              n = _ref1[j];
              layer.grid[j] = layer.grid[j].slice(0, this.x);
              layer.mark[j] = layer.mark[j].slice(0, this.x);
              layer.paint[j] = layer.paint[j].slice(0, this.x);
            }
          }
          _results.push(i += 1);
        }
        return _results;
      },
      subtractRows: function(num) {
        var i, layer, _i, _len, _ref, _results;
        this.y -= num;
        i = 0;
        _results = [];
        while (i < num) {
          _ref = this.layers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            layer = _ref[_i];
            layer.grid = layer.grid.slice(0, this.y);
            layer.mark = layer.mark.slice(0, this.y);
            layer.paint = layer.paint.slice(0, this.y);
          }
          _results.push(i += 1);
        }
        return _results;
      },
      updateCell: function(i, v, layerIndex) {
        if (layerIndex == null) {
          layerIndex = this.currentLayerIndex;
        }
        return this.layers[layerIndex] = this.layers[layerIndex].replaceAt(i, v);
      },
      addLayer: function() {
        this.layers.push({
          grid: createMatrix(this.x, this.y),
          mark: createMatrix(this.x, this.y),
          paint: createMatrix(this.x, this.y)
        });
        return this.layers;
      },
      getLayerColor: function(layerIndex) {
        if (layerIndex == null) {
          layerIndex = this.currentLayerIndex;
        }
        return this.layers[layerIndex].fgcolor;
      },
      setLayerColor: function(color, layerIndex) {
        var colors;
        if (layerIndex == null) {
          layerIndex = this.currentLayerIndex;
        }
        colors = this.fgcolor.split(',');
        colors[layerIndex] = color;
        return this.fgcolor = colors.join(',');
      },
      getLayerVisibility: function(layerIndex) {
        if (layerIndex == null) {
          layerIndex = this.currentLayerIndex;
        }
        return this.layerVisibility[layerIndex] === void 0 || this.layerVisibility[layerIndex];
      },
      setLayerVisibility: function(layerIndex, visibility) {
        return this.layerVisibility[layerIndex] = !!visibility;
      },
      getGame: function() {
        var fgcolor, l, layers, x, y, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        fgcolor = [];
        layers = '';
        _ref = this.layers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          fgcolor.push(l.fgcolor);
          _ref1 = l.grid;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            y = _ref1[_j];
            for (_k = 0, _len2 = y.length; _k < _len2; _k++) {
              x = y[_k];
              layers += x;
            }
          }
        }
        return layers;
      },
      currentLayerIndex: 0,
      title: 'untitled',
      bgcolor: '#ddd',
      fgcolor: '#00f',
      x: 10,
      y: 10,
      game: '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      levelSetName: 'My Levels',
      par: 3
    }, level)).init();
  };

}).call(this);
